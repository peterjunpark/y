generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("NEON_DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Like {
  liker       User   @relation(fields: [likerId], references: [id], onDelete: Cascade)
  likerId     String
  likedPost   Post   @relation(fields: [likedPostId], references: [id])
  likedPostId Int

  @@id([likerId, likedPostId])
  @@index([likedPostId])
}

model Bookmark {
  bookmarker       User   @relation(fields: [bookmarkerId], references: [id], onDelete: Cascade)
  bookmarkerId     String
  bookmarkedPost   Post   @relation(fields: [bookmarkedPostId], references: [id])
  bookmarkedPostId Int

  @@id([bookmarkerId, bookmarkedPostId])
}

model Thread {
  id        Int      @id @default(autoincrement())
  posts     Post[]   @relation("thread")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        Int        @id @default(autoincrement())
  content   String
  replies   Post[]     @relation("replies")
  parent    Post?      @relation("replies", fields: [parentId], references: [id])
  parentId  Int?
  thread    Thread?    @relation("thread", fields: [threadId], references: [id], onDelete: Cascade)
  threadId  Int?
  likes     Like[]
  bookmarks Bookmark[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  author    User       @relation(fields: [authorId], references: [id])
  authorId  String

  @@index([authorId])
}

enum MembershipEnum {
  standard
  premium
  turbo
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // custom functionality
  handle        String?        @unique @db.VarChar(12)
  membership    MembershipEnum @default(standard)
  posts         Post[]
  likes         Like[]
  bookmarks     Bookmark[]
  followers     User[]         @relation("following")
  followedBy    User[]         @relation("following")
}

// next-auth

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
